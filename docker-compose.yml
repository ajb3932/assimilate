services:
  assimilate-db:
    image: postgres:15-alpine
    container_name: assimilate-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-borgmatic_stats}
      POSTGRES_USER: ${POSTGRES_USER:-borgmatic}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_INITDB_ARGS: --encoding=UTF-8
    volumes:
      - ${DB_DATA_DIR}/data:/var/lib/postgresql/data
      - ${DB_DATA_DIR}/schema.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - ${POSTGRES_PORT:-5432}:5432
    healthcheck:
      test:
        - CMD-SHELL
        - pg_isready -U ${POSTGRES_USER:-borgmatic} -d
          ${POSTGRES_DB:-borgmatic_stats}
      interval: 30s
      timeout: 10s
      retries: 5

  assimilate-app:
    image: ajb3932/assimilate:latest
    container_name: assimilate-app
    restart: unless-stopped
    environment:
      # Database connection
      DATABASE_URL: postgresql://${POSTGRES_USER:-borgmatic}:${POSTGRES_PASSWORD:-password}@assimilate-db:5432/${POSTGRES_DB:-borgmatic_stats}
      POSTGRES_HOST: assimilate-db
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-borgmatic_stats}
      POSTGRES_USER: ${POSTGRES_USER:-borgmatic}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      # Application settings
      PORT: 3001
      NODE_ENV: production
      # Borgmatic container name (adjust as needed)
      BORGMATIC_CONTAINER: ${BORGMATIC_CONTAINER:-borgmatic}
    ports:
      - 3001:3001
    volumes:
      # Mount Docker socket to access borgmatic container
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      assimilate-db:
        condition: service_healthy
    healthcheck:
      test:
        - CMD
        - wget
        - --no-verbose
        - --tries=1
        - --spider
        - http://localhost:3001/api/health
      interval: 30s
      timeout: 10s
      retries: 3
networks: {}